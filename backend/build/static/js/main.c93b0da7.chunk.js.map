{"version":3,"sources":["components/NavBar.js","requests.js","components/zk.js","components/UserList.js","components/ChatBox.js","components/ErrorModal.js","components/LoadingModal.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","react_default","a","createElement","main","type","center","class","right","className","this","props","signedInUser","name","Component","axios","defaults","baseURL","process","fetchUsers","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","get","sent","abrupt","data","stop","apply","arguments","newUser","_ref2","_callee2","id","_context2","console","log","request","method","url","headers","ContentType","Accept","_x","_x2","zk","es","size","round","color","Avatar","getRandomColor","UserList","userData","searchQuery","newUserValue","newUserClick","e","value","target","_this","setState","then","response","len","length","window","location","reload","onNewUserClicked","_this2","filter","user","toLowerCase","includes","_this3","users","getFilteredUserList","FormGroup","FormControl","placeholder","onInput","searchInput","bind","showSignInList","InputGroup","onKeyPress","event","key","Button","onClick","dataSource","map","f","i","date","subtitle","messages","lastMessage","Date","timeStamp","position","text","avatar","zk_zk","title","unread","onUserClicked","onChatClicked","ChatBox","messageText","onSendClicked","targetUser","left","Col_default","mdHidden","lgHidden","Glyphicon_default","onBackPressed","glyph","lockable","toBottomHeight","FormGroup_default","InputGroup_default","FormControl_default","onChange","onMessageInputChange","onMessageKeyPress","ref","maxLength","autoFocus","Button_default","disabled","ErrorModal","Modal_default","show","Header","Title","Body","errorMessage","LoadingModal","App","socket","signInModalShow","userChatData","selectedUserIndex","showChatBox","showChatList","error","initAxios","initSocketConnection","setupSocketListeners","io","connect","interceptors","use","config","loading","Promise","reject","NotificationManager","emit","success","on","onMessageRecieved","onReconnection","onClientDisconnected","message","targetId","messageData","from","to","targetIndex","findIndex","u","push","toggleViews","index","chatBoxProps","xs","sm","xsHidden","smHidden","chatListProps","NavBar_NavBar","Grid_default","Row_default","assign","md","UserList_UserList","ChatBox_ChatBox","createMessage","ErrorModal_ErrorModal","LoadingModal_LoadingModal","react_notifications_lib","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c93b0da7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Navbar } from 'react-chat-elements';\n\nexport default class NavBar extends Component {\n  state = {};\n  render() {\n    return (\n      <Navbar type=\"dark\"\n    center={\n        <div class=\"textMess\">MESSENGER</div>\n    }\n    right={\n        <span className=\"signed-in-user\">Ahoj, {(this.props.signedInUser || {}).name}</span>\n    }/>\n    );\n  }\n}\n","import axios from 'axios';\n\nconst API_ROOT = process.env.REACT_APP_SERVER_URI\n\naxios.defaults.baseURL = API_ROOT;\n\nexport const fetchUsers = async () => {\n    let res = await axios.get(`/users`);\n\n    return res.data || [];\n}\n\nexport const newUser = async (id, name) => {\n    console.log(\"frontend \"+id+\" \"+name);\n    axios.request({\n      method: 'POST',\n      url: `http://localhost:8002/users`,\n      headers: {\n          ContentType: 'application/x-www-form-urlencoded',\n          Accept: 'application/json'\n      },\n      data: {\n            id: id,\n            name: name\n      },\n    })\n}","import React, { Component } from \"react\";\nimport Avatar from 'react-avatar';\n\nexport default class zk extends Component {\n  state = {};\n  render() {\n    return (\n            <Avatar size=\"50\" round='{true}' \n    color={Avatar.getRandomColor('sitebase', ['red', 'green', 'blue'])} name=\"kane\" />\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { ChatList } from \"react-chat-elements\";\nimport {FormControl, FormGroup, Button, InputGroup} from 'react-bootstrap';\nimport { newUser } from \"./../requests\";\nimport { fetchUsers } from \"./../requests\";\nimport {Avatar as Neco} from 'react-avatar';\nimport Zk from \"./zk\";\n/**\n *\n * Renders user list\n *\n * Used on both places Sign-in modal and as ChatList\n */\n\nexport default class UserList extends Component {\n    state = {\n        userData: [],\n        searchQuery: null,\n        newUserValue: \"\"\n    };\n    componentDidMount() {}\n    searchInput(e) {\n        let value = e.target.value;\n        let searchQuery = null;\n        if (value) {\n            searchQuery = value;\n        }\n        this.setState({searchQuery});\n    }\n\n//    rerender() {\n//\n//        fetchUsers().then(function (response) {\n//            this.setState({\n//                userData: response.data\n//            });\n//        });\n//\n//    }\n\n    newUserClick = (e) => {\n        let value = e.target.value;\n        let newUserValue = null;\n        let id = null;\n        if (value) {\n            newUserValue = value;\n        }\n        this.setState({newUserValue: e.target.value});\n        fetchUsers().then(function (response) {\n            let len = response.length;\n            id = response[len - 1]['id'];\n            console.log(\"id = \" + response[len - 1]['id'] + \", name= \" + response[len - 1]['name']);\n            newUser((id + 1), newUserValue);\n\n            //rerender()\n\n            window.location.reload();\n        });\n    }\n\n    onNewUserClicked() {\n        if (!this.state.newUserValue) {\n            return;\n        }\n        this.props.onNewUserClicked(this.state.newUserValue);\n        console.log(this.state.newUserValue);\n        this.setState({newUserValue: \"\"});\n\n    }\n    /**\n     *\n     * Implement filter logic on basis of search query.\n     */\n    getFilteredUserList() {\n        return !this.state.searchQuery\n                ? this.props.userData\n                : this.props.userData.filter(user =>\n                    user.name.toLowerCase().includes(this.state.searchQuery.toLowerCase())\n                );\n    }\n    render() {\n        let users = this.getFilteredUserList();\n        return (\n                <div>\n                    <FormGroup>\n                        <FormControl\n                            type=\"text\"\n                            className=\"hledac\"\n                            placeholder=\"Hledání\"\n                            onInput={this.searchInput.bind(this)}\n                            />\n                \n                        {this.props.showSignInList ? (\n                                    <InputGroup>  \n                                        <FormControl\n                                            type=\"text\"\n                                            placeholder=\"Přidat uživatele.\"\n                                            className=\"pridatInput\"\n                                            onKeyPress={event => {\n                                                    if (event.key === \"Enter\") {\n                                                        this.newUserClick(event);\n                                                                                                                                                          }\n                                            }}\n                                            />\n                                        <InputGroup.Button>\n                                            <Button\n                                                className=\"newUserButton\"\n                                                onClick={\n                                                        this.onNewUserClicked.bind(this)}\n                                                >\n                                                Přidat uživatele\n                                            </Button>\n                                        </InputGroup.Button>\n                                    </InputGroup>\n                                                    ) : \"\"}\n                    </FormGroup>\n                    {users.length ? (\n                                                    <ChatList\n                                                        className={!this.props.showSignInList ? \"chat-list\" : \"user-list\"}\n                                                        dataSource={users.map((f, i) => {\n                                                                    let date = null;\n                                                                    let subtitle = \"\";\n                                                                    if (\n                                                                            !this.props.showSignInList &&\n                                                                            f.messages &&\n                                                                            f.messages.length\n                                                                            ) {\n                                                                            let lastMessage = f.messages[f.messages.length - 1];\n                                                                            date = new Date(lastMessage.timeStamp);\n                                                                            subtitle =\n                                                                                    (lastMessage.position === \"right\" ? \"Poslední zpráva: \" : f.name + \": \") +\n                                                                                    lastMessage.text;\n                                                        }\n                                                        return {\n                                                                                        avatar: <Zk />,\n                                                                                        title: f.name,\n                                                                                        subtitle: subtitle,\n                                                                                        date: date,\n                                                                                        unread: f.unread,\n                                                                                        user: f\n                                                        };\n                                                        })}\n                                                \n                                                        onClick={\n                                                                            !this.props.showSignInList\n                                                                                    ? this.props.onChatClicked\n                                                                                    : this.props.onUserClicked\n                                                        }\n                                                \n                                                \n                                                \n                                                        />\n\n                                                                        ) : (\n                                                                        <div className=\"text-center no-users\">Žádní přihlášení uživatelé.</div>\n                                                                        )}\n                </div>\n                                                    );\n                        }\n                    }\n","import React, { Component } from \"react\";\nimport FormControl from \"react-bootstrap/lib/FormControl\";\nimport InputGroup from \"react-bootstrap/lib/InputGroup\";\nimport Button from \"react-bootstrap/lib/Button\";\nimport FormGroup from \"react-bootstrap/lib/FormGroup\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport Glyphicon from \"react-bootstrap/lib/Glyphicon\";\nimport Avatar from 'react-avatar';\nimport {\n  MessageList,\n  Navbar as NavbarComponent,\n} from \"react-chat-elements\";\n\n/**\n *\n * ChatBox Component\n *\n * displays all the messages from chat history.\n * renders message text box for input.\n */\n\nexport default class ChatBox extends Component {\n  state = {\n    messageText: \"\"\n  };\n  /**\n   *\n   * Sends a message only if it is not falsy.\n   */\n  onSendClicked() {\n    if (!this.state.messageText) {\n      return;\n    }\n    this.props.onSendClicked(this.state.messageText);\n    this.setState({ messageText: \"\" });\n  }\n  onMessageInputChange(e) {\n    this.setState({ messageText: e.target.value });\n  }\n  /**\n   *\n   * @param {KeyboardEvent} e\n   *\n   * listen for enter pressed and sends the message.\n   */\n  onMessageKeyPress(e) {\n    if (e.key === \"Enter\") {\n      this.onSendClicked();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.targetUser ? (\n          <div>\n            <NavbarComponent\n              left={\n                <div>\n                  <Col mdHidden lgHidden>\n                    <p className=\"navBarText\">\n                      <Glyphicon\n                        onClick={this.props.onBackPressed}\n                        glyph=\"chevron-left\"\n                      />\n                    </p>\n                  </Col>\n                  <Avatar size=\"50\" round={true} color={Avatar.getRandomColor('sitebase', ['red', 'green', 'blue'])} name={this.props.targetUser.name} />\n                  <p className=\"navBarText\">{this.props.targetUser.name}</p>\n                </div>\n              }\n            />\n            <MessageList\n              className=\"message-list\"\n              lockable={true}\n              toBottomHeight={\"100%\"}\n              dataSource={this.props.targetUser.messages}\n            />\n            <FormGroup>\n              <InputGroup>\n                <FormControl\n                  type=\"text\"\n                  value={this.state.messageText}\n                  onChange={this.onMessageInputChange.bind(this)}\n                  onKeyPress={this.onMessageKeyPress.bind(this)}\n                  placeholder=\"Text zprávy\"\n                  ref=\"messageTextBox\"\n                  className=\"messageTextBox\"\n                  maxLength=\"3000\"\n                  autoFocus\n                />\n                <InputGroup.Button>\n                  <Button\n                    disabled={!this.state.messageText}\n                    className=\"sendButton\"\n                    onClick={this.onSendClicked.bind(this)}\n                  >\n                    ODESLAT\n                  </Button>\n                </InputGroup.Button>\n              </InputGroup>\n            </FormGroup>\n          </div>\n        ) : (\n          <div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Glyphicon from \"react-bootstrap/lib/Glyphicon\";\nimport Modal from \"react-bootstrap/lib/Modal\";\n\n/**\n *\n * Renders a Error modal if app encounter any error.\n */\n\nexport default class ErrorModal extends Component {\n  state = {};\n  render() {\n    return (\n      <Modal show={this.props.show}>\n        <Modal.Header>\n          <Modal.Title>Error</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <h1 className=\"text-center\">\n            <Glyphicon glyph=\"alert\" />\n          </h1>\n          <h5 className=\"text-center\">{this.props.errorMessage}</h5>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Glyphicon from \"react-bootstrap/lib/Glyphicon\";\nimport Modal from \"react-bootstrap/lib/Modal\";\n\n/**\n *\n * Renders a loader modal.\n */\n\nexport default class LoadingModal extends Component {\n  state = {};\n  render() {\n    return (\n      <Modal show={this.props.show}>\n        <Modal.Body>\n          <h1 className=\"text-center\">\n            <Glyphicon glyph=\"refresh\" />\n          </h1>\n          <h5 className=\"text-center\">Loading...</h5>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n","\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport Grid from \"react-bootstrap/lib/Grid\";\nimport Row from \"react-bootstrap/lib/Row\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport Modal from \"react-bootstrap/lib/Modal\";\nimport UserList from \"./components/UserList\";\nimport ChatBox from \"./components/ChatBox\";\nimport ErrorModal from \"./components/ErrorModal\";\nimport LoadingModal from \"./components/LoadingModal\";\nimport \"react-chat-elements/dist/main.css\";\nimport \"./index.css\";\nimport io from \"socket.io-client\";\nimport { fetchUsers } from \"./requests\";\nimport {\n  NotificationContainer,\n  NotificationManager\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport axios from \"axios\";\n\n/**\n * Fetches socket server URL from env\n */\n//const SOCKET_URI = process.env.REACT_APP_SERVER_URI;\nconst SOCKET_URI = \"http://localhost:8002\";\n\nconsole.log(SOCKET_URI);\n\n/**\n * App Component\n *\n * initiaites Socket connection and handle all cases like disconnected,\n * reconnected again so that user can send messages when he is back online\n *\n * handles Error scenarios if requests from Axios fails.\n *\n */\n\nclass App extends Component {\n  socket = null;\n\n  state = {\n    signInModalShow: false,\n    users: [], // Avaiable users for signing-in\n    userChatData: [], // this contains users from which signed-in user can chat and its message data.\n    user: null, // Signed-In User\n    selectedUserIndex: null,\n    showChatBox: false, // For small devices only\n    showChatList: true, // For small devices only\n    error: false,\n    errorMessage: \"\"\n  };\n\n  /**\n   *\n   * Setups Axios to monitor XHR errors.\n   * Initiates and listen to socket.\n   * fetches User's list from backend to populate.\n   */\n\n  componentDidMount() {\n    this.initAxios();\n    this.initSocketConnection();\n    fetchUsers().then(users => this.setState({ users, signInModalShow: true }));\n    this.setupSocketListeners();\n  }\n\n  initSocketConnection() {\n    this.socket = io.connect(SOCKET_URI);\n  }\n\n  /**\n   *\n   * Checks if request from axios fails\n   * and if it does then shows error modal.\n   */\n  initAxios() {\n    axios.interceptors.request.use(\n      config => {\n        this.setState({ loading: true });\n        return config;\n      },\n      error => {\n        this.setState({ loading: false });\n        this.setState({\n          errorMessage: `Server vypnut`,\n          error: true\n        });\n        return Promise.reject(error);\n      }\n    );\n    axios.interceptors.response.use(\n      response => {\n        this.setState({ loading: false });\n        return response;\n      },\n      error => {\n        this.setState({ loading: false });\n        this.setState({\n          errorMessage: `Some error occured. try after sometime`,\n          error: true\n        });\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  /**\n   *\n   * Shows error if client gets disconnected.\n   */\n  onClientDisconnected() {\n    NotificationManager.error(\n      \"Ztráta spojení se serverem.\",\n      \"Error!\"\n    );\n  }\n\n  /**\n   *\n   * Established new connection if reconnected.\n   */\n  onReconnection() {\n    if (this.state.user) {\n      this.socket.emit(\"sign-in\", this.state.user);\n      NotificationManager.success(\"Connection Established.\", \"Reconnected!\");\n    }\n  }\n\n  /**\n   *\n   * Setup all listeners\n   */\n\n  setupSocketListeners() {\n    this.socket.on(\"message\", this.onMessageRecieved.bind(this));\n    this.socket.on(\"reconnect\", this.onReconnection.bind(this));\n    this.socket.on(\"disconnect\", this.onClientDisconnected.bind(this));\n  }\n\n  /**\n   *\n   * @param {MessageRecievedFromSocket} message\n   *\n   * Triggered when message is received.\n   * It can be a message from user himself but on different session (Tab).\n   * so it decides which is the position of the message \"right\" or \"left\".\n   *\n   * increments unread count and appends in the messages array to maintain Chat History\n   */\n\n  onMessageRecieved(message) {\n    let userChatData = this.state.userChatData;\n    let messageData = message.message;\n    let targetId;\n    if (message.from === this.state.user.id) {\n      messageData.position = \"right\";\n      targetId = message.to;\n    } else {\n      messageData.position = \"left\";\n      targetId = message.from;\n    }\n    let targetIndex = userChatData.findIndex(u => u.id === targetId);\n    if (!userChatData[targetIndex].messages) {\n      userChatData[targetIndex].messages = [];\n    }\n    if (targetIndex !== this.state.selectedUserIndex) {\n      if (!userChatData[targetIndex].unread) {\n        userChatData[targetIndex].unread = 0;\n      }\n      userChatData[targetIndex].unread++;\n    }\n    userChatData[targetIndex].messages.push(messageData);\n    this.setState({ userChatData });\n  }\n\n  /**\n   *\n   * @param {User} e\n   *\n   * called when user clicks to sign-in\n   */\n  onUserClicked(e) {\n    let user = e.user;\n    this.socket.emit(\"sign-in\", user);\n    let userChatData = this.state.users.filter(u => u.id !== user.id);\n    this.setState({ user, signInModalShow: false, userChatData });\n  }\n\n  /**\n   *\n   * @param {ChatItem} e\n   *\n   * handles if user clickes on ChatItem on left.\n   */\n  onChatClicked(e) {\n    this.toggleViews();\n    let users = this.state.userChatData;\n    for (let index = 0; index < users.length; index++) {\n      if (users[index].id === e.user.id) {\n        users[index].unread = 0;\n        this.setState({ selectedUserIndex: index, userChatData: users });\n        return;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {messageText} text\n   *\n   * creates message in a format in which messageList can render.\n   * position is purposely omitted and will be appended when message is received.\n   */\n  createMessage(text) {\n    let message = {\n      to: this.state.userChatData[this.state.selectedUserIndex].id,\n      message: {\n        type: \"text\",\n        text: text,\n        date: +new Date(),\n        className: \"message\"\n      },\n      from: this.state.user.id\n    };\n    this.socket.emit(\"message\", message);\n  }\n\n  /**\n   * Toggles views from 'ChatList' to 'ChatBox'\n   *\n   * only on Phone\n   */\n  toggleViews() {\n    this.setState({\n      showChatBox: !this.state.showChatBox,\n      showChatList: !this.state.showChatList\n    });\n  }\n\n  render() {\n    let chatBoxProps = this.state.showChatBox\n      ? {\n          xs: 12,\n          sm: 12\n        }\n      : {\n          xsHidden: true,\n          smHidden: true\n        };\n\n    let chatListProps = this.state.showChatList\n      ? {\n          xs: 12,\n          sm: 12\n        }\n      : {\n          xsHidden: true,\n          smHidden: true\n        };\n\n    return (\n      <div>\n        <NavBar signedInUser={this.state.user} />\n        <div class=\"mezera\"></div>\n        <Grid>\n          <Row className=\"show-grid\">\n            <Col {...chatListProps} md={4}>\n              <UserList\n                userData={this.state.userChatData}\n                onChatClicked={this.onChatClicked.bind(this)}\n              />\n            </Col>\n            <Col {...chatBoxProps} md={8}>\n              <ChatBox\n                signedInUser={this.state.user}\n                onSendClicked={this.createMessage.bind(this)}\n                onBackPressed={this.toggleViews.bind(this)}\n                targetUser={\n                  this.state.userChatData[this.state.selectedUserIndex]\n                }\n              />\n            </Col>\n          </Row>\n        </Grid>\n        <Modal show={this.state.signInModalShow}>\n          <Modal.Header>\n            <Modal.Title>Přihlašení:</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <UserList\n              userData={this.state.users}\n              onUserClicked={this.onUserClicked.bind(this)}\n              showSignInList\n            />\n          </Modal.Body>\n        </Modal>\n        <ErrorModal\n          show={this.state.error}\n          errorMessage={this.state.errorMessage}\n        />\n        <LoadingModal show={this.state.loading} />\n        <NotificationContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}